# Copyright (c) 2020 The STE||AR-Group
#
# SPDX-License-Identifier: BSL-1.0
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Do not edit this file! It has been generated by the cmake configuration step.

include(HPX_Message)
include(HPX_AddPseudoDependencies)
include(HPX_AddPseudoTarget)

# cmake-format: off
set(HPX_MODULES
    affinity
    algorithms
    allocator_support
    asio
    assertion
    async
    async_base
    async_combinators
    batch_environments
    basic_execution
    cache
    checkpoint
    collectives
    command_line_handling
    compute
    compute_cuda
    concepts
    concurrency
    config
    config_registry
    coroutines
    datastructures
    debugging
    distributed_executors
    errors
    execution
    executors
    filesystem
    format
    functional
    futures
    hardware
    hashing
    include
    io_service
    iterator_support
    lcos_distributed
    local_async
    local_lcos
    logging
    memory
    mpi
    mpi_base
    naming_base
    pack_traversal
    performance_counters
    plugin
    prefix
    preprocessor
    program_options
    resiliency
    resource_partitioner
    runtime_configuration
    schedulers
    segmented_algorithms
    serialization
    static_reinit
    statistics
    string_util
    synchronization
    testing
    thread_executors
    thread_pools
    thread_support
    threading
    threading_base
    threadmanager
    timed_execution
    timing
    topology
    type_support
    util
    version
)
# cmake-format: on

# add example pseudo targets needed for modules
if(HPX_WITH_EXAMPLES)
  add_hpx_pseudo_target(examples.modules)
  add_hpx_pseudo_dependencies(examples examples.modules)
endif()

# add test pseudo targets needed for modules
if(HPX_WITH_TESTS)
  if(HPX_WITH_TESTS_UNIT)
    add_hpx_pseudo_target(tests.unit.modules)
    add_hpx_pseudo_dependencies(tests.unit tests.unit.modules)
  endif()

  if(HPX_WITH_EXAMPLES AND HPX_WITH_TESTS_EXAMPLES)
    add_hpx_pseudo_target(tests.examples.modules)
    add_hpx_pseudo_dependencies(tests.examples tests.examples.modules)
  endif()

  if(HPX_WITH_TESTS_REGRESSIONS)
    add_hpx_pseudo_target(tests.regressions.modules)
    add_hpx_pseudo_dependencies(tests.regressions tests.regressions.modules)
  endif()

  if(HPX_WITH_TESTS_BENCHMARKS)
    add_hpx_pseudo_target(tests.performance.modules)
    add_hpx_pseudo_dependencies(tests.performance tests.performance.modules)
  endif()

  if(HPX_WITH_TESTS_HEADERS)
    add_hpx_pseudo_target(tests.headers.modules)
    add_hpx_pseudo_dependencies(tests.headers tests.headers.modules)
  endif()
endif()

hpx_info("")
hpx_info("Configuring modules:")

# Generate a file that lists all enabled modules for checks that might be
# optional based on the presence of a module or not
set(MODULE_ENABLED_MODULE_DEFINES)

# variables needed for config_strings_modules.hpp
set(CONFIG_STRINGS_MODULES_INCLUDES)
set(CONFIG_STRINGS_MODULES_ENTRIES)

# Add the core library. NOTE: The main library is still created in
# src/CMakeLists.txt but will move here when all modules are in place.
add_library(hpx_core SHARED dummy.cpp)
add_library(hpx_core_static STATIC dummy.cpp)
target_link_libraries(hpx_full PUBLIC hpx_core)
# hpx_full_static?

install(
  TARGETS hpx_core
  EXPORT HPXInternalTargets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
          COMPONENT core
)
install(
  TARGETS hpx_core_static
  EXPORT HPXInternalTargets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
          COMPONENT core
)

hpx_export_internal_targets(hpx_core hpx_core_static)

foreach(module ${HPX_MODULES})
  add_subdirectory(${module})
endforeach()

configure_file(
  "${PROJECT_SOURCE_DIR}/cmake/templates/modules.cpp.in"
  "${PROJECT_BINARY_DIR}/modules/modules.cpp" @ONLY
)

# add_hpx_module populates HPX_ENABLED_MODULES
foreach(module ${HPX_ENABLED_MODULES})
  string(TOUPPER ${module} uppercase_module)

  set(MODULE_ENABLED_MODULE_DEFINES
      "${MODULE_ENABLED_MODULE_DEFINES}#define HPX_HAVE_MODULE_${uppercase_module}\n"
  )
endforeach()

configure_file(
  "${PROJECT_SOURCE_DIR}/cmake/templates/modules_enabled.hpp.in"
  "${PROJECT_BINARY_DIR}/modules/config/include/hpx/config/modules_enabled.hpp"
  @ONLY
)
